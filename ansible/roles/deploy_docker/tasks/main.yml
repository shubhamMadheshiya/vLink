---
- name: Ensure Docker is installed
  ansible.builtin.apt:
    name: docker.io
    state: present
    update_cache: yes

- name: Ensure Docker Compose is installed
  ansible.builtin.apt:
    name: docker-compose
    state: present
    update_cache: yes

- name: Log in to Nexus Docker registry
  community.docker.docker_login:
    registry_url: "http://{{ nexus_registry }}"
    username: "{{ nexus_username }}"
    password: "{{ nexus_password }}"

- name: Create app directory
  ansible.builtin.file:
    path: /opt/vlink
    state: directory

- name: Deploy docker-compose file
  ansible.builtin.template:
    src: docker-compose.yml.j2
    dest: /opt/vlink/docker-compose.yml

- name: Restart Docker service to clear any hung states
  ansible.builtin.systemd:
    name: docker
    state: restarted
    daemon_reload: yes
  # This crucial step ensures the Docker daemon is in a fresh, responsive state
  # before any Docker Compose operations are attempted. This addresses common
  # 'Read timed out' errors and ensures daemon stability.

- name: Stop and remove existing Docker Compose project and ALL associated images
  community.docker.docker_compose:
    project_src: /opt/vlink
    state: absent
    rmi: all # This is the key: it removes all images associated with this project
  ignore_errors: yes
  # This task performs a comprehensive cleanup:
  # - 'state: absent' stops and removes all containers, networks, and volumes
  #   defined in the docker-compose.yml at /opt/vlink.
  # - 'rmi: all' goes a step further by deleting ALL Docker images that were
  #   previously used by this Docker Compose project. This prevents conflicts
  #   from old or corrupted cached images, ensuring a clean slate for the new deployment.
  # - 'ignore_errors: yes' allows the playbook to proceed even if no previous
  #   project was running or if some resources couldn't be removed, making the
  #   cleanup robust.

- name: Pull and run Docker container
  community.docker.docker_compose:
    project_src: /opt/vlink
    pull: yes # Always pull the latest version of the image
    restarted: yes
  # After the Docker service restart and a thorough cleanup of old containers
  # and images, this task will perform a fresh pull of the new image
  # and start the application, minimizing the risk of deployment failures.