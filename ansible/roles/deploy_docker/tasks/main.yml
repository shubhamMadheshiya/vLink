---
# Remove old/legacy Docker packages
- name: Remove old Docker and containerd versions
  apt:
    name:
      - docker
      - docker-engine
      - docker.io
      - containerd
      - runc
    state: absent
    purge: yes
    update_cache: yes

# Install prerequisites for Docker repo
- name: Install prerequisites
  apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
    state: present
    update_cache: yes

# Ensure keyrings directory
- name: Ensure /etc/apt/keyrings exists
  file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'

# Add Docker GPG key in dearmored format
- name: Add Docker GPG key
  shell: |
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
  args:
    creates: /etc/apt/keyrings/docker.gpg

- name: Set permissions on Docker GPG key
  file:
    path: /etc/apt/keyrings/docker.gpg
    mode: '0644'

# Add Docker apt repository manually
- name: Add Docker apt repository
  copy:
    dest: /etc/apt/sources.list.d/docker.list
    content: |
      deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
    mode: '0644'

# Update apt cache
- name: Update apt cache
  apt:
    update_cache: yes

# Install Docker CE + plugins
- name: Install Docker CE and plugins
  apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
    state: present

# Ensure Docker service is running
- name: Ensure Docker service is running
  service:
    name: docker
    state: started
    enabled: true

# Configure insecure registry
- name: Configure Docker to allow insecure registry
  copy:
    dest: /etc/docker/daemon.json
    content: |
      {
        "insecure-registries": ["{{ nexus_registry }}"]
      }
  notify: Restart docker

# Ensure pip3 is installed (needed for Python modules)
- name: Ensure pip3 is installed
  apt:
    name: python3-pip
    state: present

# Install Docker SDK for Python (needed for community.docker)
- name: Install Docker SDK for Python
  ansible.builtin.pip:
    name: docker
    state: present

# Log in to Nexus
- name: Log in to Nexus Docker registry
  community.docker.docker_login:
    registry_url: "http://{{ nexus_registry }}"
    username: "{{ nexus_username }}"
    password: "{{ nexus_password }}"

# Create app directory
- name: Create app directory
  file:
    path: /opt/vlink
    state: directory

# Deploy docker-compose.yml
- name: Deploy docker-compose file
  template:
    src: docker-compose.yml.j2
    dest: /opt/vlink/docker-compose.yml

# Pull and run Docker containers
- name: Pull and run Docker container
  community.docker.docker_compose:
    project_src: /opt/vlink
    pull: yes
    restarted: yes
